# Git的简单研究
**Git是一个分布式的版本控制管理系统。**

Git的第一个版本是Linus用了2周时间写出来的，对大神是各种福气。

如何下载git，使用mac电脑的话，推荐是去下载苹果官方的IDE软件，Xcode，所有的iOS、OS软件都是用这个IDE开发的，这个IDE自带git。

#### 创建版本库
使用::git init::命令，在当前位置创建一个版本库
你会发现在本地多了一个不可见的.git文件，这个文件就是用于记录全部版本信息的版本库，如果删除它，也就等于删除了版本库。

#### 把文件提交到版本记录中
需要两步：
::git add <file>::
::git commit -m <message>::（-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录）

为什么需要两步，这就和git运行的方式相关了。git的版本库有一个暂存区（Stage）的概念，也就是所有文件在提交之前，都必须经过暂存区，这是Linus精心设计过的。
Git用户可以往暂存区内提交多个文件，然后一次性commit所有修改。

暂存区的实现原理如下：
[image:7D078236-F66B-4E27-B05D-292B7919B8D8-573-0000187C9D59947D/89CF7FA7-C310-4A42-865C-B7D365645AC7.png]

特别要主要：
在管理修改的时候，可能存在add到暂存区了，但是没有被commit，这会影响到最后的结果，建议频繁使用::git status::不断check当前版本库的状态。如果git status告诉你有文件被修改过，用::git diff::可以查看修改内容。

#### 查看版本和版本回退
查看过去所有提交的历史记录::git log::（加上--pretty=oneline参数，可以让log变得更好看一些）

版本回退必须要知道当前版本是哪一个版本，在git中，用HEAD表示当前版本，上一个版本就是HEAD^，往上100个版本可以写成HEAD-100
于是，回退版本可以用::git reset --hard HEAD（版本号也行）::命令

在git中，永远有后悔药可以吃，只要能查到对应的commit id，就能恢复其中的内容。::git reflog::就是一个好用的命令，它可以看到你每次提交的命令。

#### 撤销修改
a）撤销工作区的修改::git checkout -- file::
B）如果已经提交到了暂存区::git reset HEAD <file>::清空了暂存区，然后再回到第a步，撤销工作区的修改即可；
C）如果已经提交到版本库了，使用::git reset —Hard Head（版本号）::进行版本回退，但是是可以找回已经提交的内容了；
D）如果已经推送到了远程库，那就真的回天乏术了。

#### 分支管理
了解分支管理以前，要了解一下git的实现原理。
为什么git可以回退版本这么快，是因为git的版本设计思路是**指针**（C++的核心思路之一）。
a）init git的时候，git会自动生成一条时间线，这条时间线就是master，git用指针master指向最新的提交，再用HEAD只想master，这样就能确定当前分支，已经当前分支的提交点。
[image:6F101FC0-016D-4C95-951D-B20A1052ADD5-573-000019C68A6739CC/315B7C02-D32F-4A82-993D-A15457E6F5B4.png]

b）当我们创建新的分支时，比如dev，git就新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，表示当前分支再dev上。
[image:965637F5-0628-4C9D-9788-421D64EF5CE4-573-000019DA3963699A/4A24AB09-B284-4346-BF4E-DD8803D273DD.png]

c）之后再不切换分支的前提下，对工作区所提交的全部修改，就是针对dev分支了。比如新提交一次后，dev指针往前移动一步，而master指针不变。
[image:6D637FB4-A122-44FE-93C6-64279A8E3A26-573-000019EB7CF0AD29/937823D3-3DE2-41CA-981D-B940AC173CBF.png]

d）这时，dev的开发工作完成了，要把dev合并到master上，git的方式就是直接把master只想dev当前的提交。
[image:38B24C05-CE2A-4646-B8DF-B2793A9FDD10-573-00001A026DF8260E/A7F1610B-59B9-4F11-913A-4789633736E6.png]

最后，再根据实际需要，是否要删除dev分支。

git非常鼓励大量使用分支，这也是git的精髓所在。

###### 分支管理的常用语句
查看当前有多少分支::git branch::
创建分支::git branch <name>::
切换分支::git checkout <name>::
创建+切换分支::git checkout -b <name>::
合并某分支到当前分支::git merge <name>::（git会默认使用Fast forward模式，这种模式下，删除分支后，会丢掉分支信息。所以，在merge的时候，使用 --no-ff回保留分支的commit信息）
删除分支::git branch -d <name>::

###### 解决冲突
当master和分支都修改了同一内容时，就会出现冲突。使用::git status::可以查看具体冲突的文件。
这种情况，必须手工解决冲突后，才可以再次提交成功，也就是保证master和分支在冲突内容上的一致后。

###### 分支管理策略
一般，不鼓励使用Fast Forward合并分支，因为这样会丢失分支的commit信息。当不使用Fast Forward的时候，分支合并看上去就像是这样（这样更好）：
[image:6EAFC28D-EDF5-45D3-9D95-EBD3903392C0-573-00001AB998971779/15D6A7D0-2586-4131-9286-1E3D054BDE24.png]

具体的管理策略：
a）首先，**master应该非常稳定**，仅仅能用来发布版本，不能在上面干活（git是支持打标签的，而且强烈建议用好标签，如何打tag，这里就不详细写了，可以Google之）。
[image:88FBF9CF-6EA9-4840-B18A-BBD931B9AEF9-573-00001C496B89D652/B1F92536-C57B-4160-848F-E81BFCB1A2AD.png]

B）其次，**干活都在dev上干**，dev是非常不稳定的，到了某个时候，比如1.0版本发布的时候，再把dev分支合并到master上。
c)然后，具体来讲，
- **feature分支**，添加一个新功能时，肯定不希望因为一些实验性质的代码，把master搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。（::这对产品是否能很好的规划eature密切相关，以及研发底层的架构能否解耦密切相关::）新建分支和合并分支上面已经讲到过了，如果要丢弃一个没有被合并过的分支，可以通过::git branch -D <name>::强行删除。
[image:0BD86220-133F-4F3A-8E8A-43BDF635BC37-573-00001C59DB96951A/93298313-7ED7-4F3B-93C9-3A36BB212FA5.png]

- **bug分支**，基于git的特性，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
由于修复bug往往非常紧急，这个时候，你的暂存区中又有可能有一堆即将提交的内容，git提供了一个stash的功能，可以把当前工作现场“储藏”起来，等bug修复后继续工作。
::git stash::储存当前现场，储存完成之后，用git status命令看一下，工作区是否是干净的。
::git stash list::可以查看历史上所有的暂存
::git stash apply::和::git stash pop::（不保留stash内容）可以恢复stash
[image:01EF34B9-9110-4480-ADCA-ACEFBF5F155D-573-00001C616BB8B3C1/ED99E7B9-95B7-45D6-92C1-35A5C4B7FC13.png]

所以，在开发过程中，我们的分支管理看起来更像是这样的：
[image:4963FFC3-4ACC-421E-B03E-534E62C4DE40-573-00001B8CA6244645/7569EF2A-42F4-46E0-B4E5-5269F332AEEC.png]

D）最后，因为基本不会有在本地多人协作的场景，基于远端git库（比如github）的多人协作模式更加常见。和本地协作，主要是这一点不同：::因为多人协作，所以在推送push本地代码到远端的时候，基本都会因为冲突而失败，于是会尝试将远端代码拉回pull本地，并且在本地解决冲突并提交。::


#### 其他：
- 所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。
- 异步编程的一个原则：**一旦决定使用异步，则系统每一层都必须是异步？？？**，“开弓没有回头箭”。
- 我的github，里面还没有几个repo，但是今年想自己提交一个小程序，欢迎大家follow：[choijun511 / Repositories · GitHub](https://github.com/choijun511?tab=repositories)
- 如何下载git，使用mac电脑的话，推荐是去下载苹果官方的IDE软件，Xcode，所有的iOS、OS软件都是用这个IDE开发的，这个IDE自带git。
- 本地一个txt文档，就能让你玩git玩到很high了，确实是超级强大的工具，可以试一试。

ref：
- [git - the simple guide - no deep shit!](http://rogerdudler.github.io/git-guide/index.zh.html)
- [廖雪峰git教程](http://www.ruanyifeng.com/blog/2012/07/git.html)
- [Git分支管理策略 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2012/07/git.html)
- [Why Git | Atlassian Git Tutorial](https://www.atlassian.com/git/tutorials/why-git#git-for-product-management)

#麻瓜社/技术进阶